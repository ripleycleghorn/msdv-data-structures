<!DOCTYPE html>
<meta charset="utf-8">
<style> /* set the CSS */

.line {
  fill: none;
  stroke: steelblue;
  stroke-width: 2px;
}
.high-threshold {
  fill: none;
  stroke: teal;
  stroke-width: 2px;
}
div.tooltip {
  position: absolute;
  text-align: center;
  width: 150px;
  height: 28px;
  padding: 2px;
  font: 12px sans-serif;
  background: pink;
  border: 0px;
  border-radius: 8px;
  pointer-events: none;
}
</style>
<body>

<!-- load the d3.js library -->    	
<script src="https://d3js.org/d3.v6.min.js"></script>
<script>

// set the dimensions and margins of the graph
var margin = {top: 20, right: 20, bottom: 50, left: 70},
    width = 960 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

// parse the date / time
var parser = d3.utcParse("%Y-%m-%dT%H:%M:%S.%LZ");
var formatTime = d3.timeFormat("%m-%dT%H:%M");

// set the ranges
var x = d3.scaleTime().range([0, width]);
var y = d3.scaleLinear().range([height, 0]);

// define the line
var valueline = d3.line()
    .x(function(d) { return x(d.sensortime); })
    .y(function(d) { return y(d.sensorvalue); })
    // .curve(d3.curveBasis);

var high_threshold_line = d3.line()
    .x(function(d){ return x(d.sensortime); })
    .y(87);

var div = d3.select("body").append("div")
    .attr("class", "tooltip")
    .style("opacity", 0);

// append the svg obgect to the body of the page
// appends a 'group' element to 'svg'
// moves the 'group' element to the top left margin
var svg = d3.select("body").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform",
          "translate(" + margin.left + "," + margin.top + ")");

// Get the data
var data = {{{sensordata}}} ;

// format the data
data.forEach(element => {
    element.sensortime = parser(element.sensortime);
});

// Scale the range of the data
x.domain(d3.extent(data, d => d.sensortime));
y.domain([60, 70]);

// Add the valueline path.
svg.append("path")
    .data([data])
    .attr("class", "line")
    .attr("d", valueline);

// Add the x Axis
svg.append("g")
    .attr("transform", "translate(0," + height + ")")
    .call(d3.axisBottom(x));

// Add the y Axis
svg.append("g")
    .call(d3.axisLeft(y));

svg.append("path")
    .data([data])
    .attr("class", "line high-threshold")
    .attr("d", high_threshold_line)
svg.selectAll("dot")
     .data(data)
   .enter().append("circle")
     .attr("r", 1.5)
     .attr("cx", function(d) { return x(d.sensortime); })
     .attr("cy", function(d) { return y(d.sensorvalue); })
     .on("mouseover", function(event,d) {
       div.transition()
         .duration(200)
         .style("opacity", .9);
       div.html((d.sensortime.toLocaleString('en-US', { timeZone: 'UTC' })) + "<br/>" + Math.round(d.sensorvalue) + " degrees")
         .style("left", (event.pageX) + "px")
         .style("top", (event.pageY - 28) + "px");
       })
     .on("mouseout", function(d) {
       div.transition()
         .duration(500)
         .style("opacity", 0);
       });

</script>
</body>